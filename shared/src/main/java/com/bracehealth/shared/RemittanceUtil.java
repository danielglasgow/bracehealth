package com.bracehealth.shared;

import java.util.Random;
import com.bracehealth.shared.CurrencyUtil.CurrencyAmount;

/**
 * Helper for generating remittances.
 * 
 * Normally remittances would be generated by a real (third-party) clearinghouse. This class
 * provides helpers for generating remittances for testing / simulation purposes.
 **/
public class RemittanceUtil {
    private RemittanceUtil() {}


    /**
     * Generates a random remittance for a given claim, by distributing the charges randomly between
     * each remittance field, such that their total equals the total amount owed.
     */
    public static Remittance generateRandomRemittance(PayerClaim claim) {
        CurrencyAmount totalAmountOwed = CurrencyAmount.ZERO;
        for (ServiceLine serviceLine : claim.getServiceLinesList()) {
            totalAmountOwed =
                    totalAmountOwed.add(CurrencyAmount.fromProto(serviceLine.getCharge()));
        }
        CurrencyAmount remainingAmountOwed = totalAmountOwed;
        CurrencyAmount payerPaidAmount = CurrencyAmount.ZERO;
        CurrencyAmount coinsuranceAmount = CurrencyAmount.ZERO;
        CurrencyAmount copayAmount = CurrencyAmount.ZERO;
        CurrencyAmount deductibleAmount = CurrencyAmount.ZERO;
        CurrencyAmount notAllowedAmount = CurrencyAmount.ZERO;
        while (remainingAmountOwed.isGreaterThanOrEqualTo(CurrencyAmount.ONE)) {
            remainingAmountOwed = remainingAmountOwed.subtract(CurrencyAmount.ONE);
            int randomIndex = new Random().nextInt(5);
            switch (randomIndex) {
                case 0 -> payerPaidAmount = payerPaidAmount.add(CurrencyAmount.ONE);
                case 1 -> coinsuranceAmount = coinsuranceAmount.add(CurrencyAmount.ONE);
                case 2 -> copayAmount = copayAmount.add(CurrencyAmount.ONE);
                case 3 -> deductibleAmount = deductibleAmount.add(CurrencyAmount.ONE);
                case 4 -> notAllowedAmount = notAllowedAmount.add(CurrencyAmount.ONE);
                default -> throw new IllegalStateException("Unexpected value: " + randomIndex);
            }
        }
        int deductedCents = 0;
        if (payerPaidAmount.isGreaterThan(CurrencyAmount.ONE)) {
            int randomDeductedCents = new Random().nextInt(100);
            deductedCents += randomDeductedCents;
            payerPaidAmount = payerPaidAmount.subtractDecimal(randomDeductedCents);
        }
        if (coinsuranceAmount.isGreaterThan(CurrencyAmount.ONE)) {
            int randomDeductedCents = new Random().nextInt(100);
            deductedCents += randomDeductedCents;
            coinsuranceAmount = coinsuranceAmount.subtractDecimal(randomDeductedCents);
        }
        if (copayAmount.isGreaterThan(CurrencyAmount.ONE)) {
            int randomDeductedCents = new Random().nextInt(100);
            deductedCents += randomDeductedCents;
            copayAmount = copayAmount.subtractDecimal(randomDeductedCents);
        }
        if (deductibleAmount.isGreaterThan(CurrencyAmount.ONE)) {
            int randomDeductedCents = new Random().nextInt(100);
            deductedCents += randomDeductedCents;
            deductibleAmount = deductibleAmount.subtractDecimal(randomDeductedCents);
        }
        if (notAllowedAmount.isGreaterThan(CurrencyAmount.ONE)) {
            int randomDeductedCents = new Random().nextInt(100);
            deductedCents += randomDeductedCents;
            notAllowedAmount = notAllowedAmount.subtractDecimal(randomDeductedCents);
        }
        remainingAmountOwed = remainingAmountOwed.addDecimal(deductedCents);
        int randomIndex = new Random().nextInt(5);
        switch (randomIndex) {
            case 0 -> payerPaidAmount = payerPaidAmount.add(remainingAmountOwed);
            case 1 -> coinsuranceAmount = coinsuranceAmount.add(remainingAmountOwed);
            case 2 -> copayAmount = copayAmount.add(remainingAmountOwed);
            case 3 -> deductibleAmount = deductibleAmount.add(remainingAmountOwed);
            case 4 -> notAllowedAmount = notAllowedAmount.add(remainingAmountOwed);
            default -> throw new IllegalStateException("Unexpected value: " + randomIndex);
        }
        Remittance remittance = Remittance.newBuilder().setClaimId(claim.getClaimId())
                .setPayerPaidAmount(payerPaidAmount.toProto())
                .setCoinsuranceAmount(coinsuranceAmount.toProto())
                .setCopayAmount(copayAmount.toProto())
                .setDeductibleAmount(deductibleAmount.toProto())
                .setNotAllowedAmount(notAllowedAmount.toProto()).build();
        checkState(getTotal(remittance).isEqualTo(totalAmountOwed));
        return remittance;
    }

    private static CurrencyAmount getTotal(Remittance remittance) {
        return CurrencyAmount.fromProto(remittance.getPayerPaidAmount())
                .add(CurrencyAmount.fromProto(remittance.getCoinsuranceAmount()))
                .add(CurrencyAmount.fromProto(remittance.getCopayAmount()))
                .add(CurrencyAmount.fromProto(remittance.getDeductibleAmount()))
                .add(CurrencyAmount.fromProto(remittance.getNotAllowedAmount()));
    }

    private static void checkState(boolean condition) {
        if (!condition) {
            throw new IllegalStateException("Condition is not true");
        }
    }

}
